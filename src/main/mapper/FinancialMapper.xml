<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.da.sageassistantserver.dao.FinancialMapper">
  <!--Open L2 Cache under Names pace: 1 Hour -->
  <cache eviction="FIFO" flushInterval="3600000" readOnly="true" size="256" />
  <select id="findAccountBalanceByAccountNO" resultType="com.da.sageassistantserver.model.FinancialBalance">
    SELECT
        T1.AccountNO,
      T1.Currency, 
      T1.Year,
      D0-C0 AS B0,
      IIF(DATEPART(yyyy, GETDATE())=#{Year} AND DATEPART(m, GETDATE())>=1, D0+D1-C0-C1, 0) AS B1,
      IIF(DATEPART(yyyy, GETDATE())=#{Year} AND DATEPART(m, GETDATE())>=2, D0+D1+D2-C0-C1-C2, 0) AS B2,
      IIF(DATEPART(yyyy, GETDATE())=#{Year} AND DATEPART(m, GETDATE())>=3, D0+D1+D2+D3-C0-C1-C2-C3, 0) AS B3,
      IIF(DATEPART(yyyy, GETDATE())=#{Year} AND DATEPART(m, GETDATE())>=4, D0+D1+D2+D3+D4-C0-C1-C2-C3-C4, 0) AS B4,
      IIF(DATEPART(yyyy, GETDATE())=#{Year} AND DATEPART(m, GETDATE())>=5, D0+D1+D2+D3+D4+D5-C0-C1-C2-C3-C4-C5, 0) AS B5,
      IIF(DATEPART(yyyy, GETDATE())=#{Year} AND DATEPART(m, GETDATE())>=6, D0+D1+D2+D3+D4+D5+D6-C0-C1-C2-C3-C4-C5-C6, 0) AS B6,
      IIF(DATEPART(yyyy, GETDATE())=#{Year} AND DATEPART(m, GETDATE())>=7, D0+D1+D2+D3+D4+D5+D6+D7-C0-C1-C2-C3-C4-C5-C6-C7, 0) AS B7,
      IIF(DATEPART(yyyy, GETDATE())=#{Year} AND DATEPART(m, GETDATE())>=8, D0+D1+D2+D3+D4+D5+D6+D7+D8-C0-C1-C2-C3-C4-C5-C6-C7-C8, 0) AS B8,
      IIF(DATEPART(yyyy, GETDATE())=#{Year} AND DATEPART(m, GETDATE())>=9, D0+D1+D2+D3+D4+D5+D6+D7+D8+D9-C0-C1-C2-C3-C4-C5-C6-C7-C8-C9, 0) AS B9,
      IIF(DATEPART(yyyy, GETDATE())=#{Year} AND DATEPART(m, GETDATE())>=10, D0+D1+D2+D3+D4+D5+D6+D7+D8+D9+D10-C0-C1-C2-C3-C4-C5-C6-C7-C8-C9-C10, 0) AS B10,
      IIF(DATEPART(yyyy, GETDATE())=#{Year} AND DATEPART(m, GETDATE())>=11, D0+D1+D2+D3+D4+D5+D6+D7+D8+D9+D10+D11-C0-C1-C2-C3-C4-C5-C6-C7-C8-C9-C10-C11, 0) AS B11,
      IIF(DATEPART(yyyy, GETDATE())=#{Year} AND DATEPART(m, GETDATE())>=12, D0+D1+D2+D3+D4+D5+D6+D7+D8+D9+D10+D11+D12-C0-C1-C2-C3-C4-C5-C6-C7-C8-C9-C10-C11-C12, 0) AS B12,
      D0-C0 AS M0,
      D1-C1 AS M1,
      D2-C2 AS M2,
      D3-C3 AS M3,
      D4-C4 AS M4,
      D5-C5 AS M5,
      D6-C6 AS M6,
      D7-C7 AS M7,
      D8-C8 AS M8,
      D9-C9 AS M9,
      D10-C10 AS M10,
      D11-C11 AS M11,
      D12-C12 AS M12,
      T1.C0,
      T1.C1,
      T1.C2,
      T1.C3,
      T1.C4,
      T1.C5,
      T1.C6,
      T1.C7,
      T1.C8,
      T1.C9,
      T1.C10,
      T1.C11,
      T1.C12,
      T1.D0,
      T1.D1,
      T1.D2,
      T1.D3,
      T1.D4,
      T1.D5,
      T1.D6,
      T1.D7,
      T1.D8,
      T1.D9,
      T1.D10,
      T1.D11,
      T1.D12
    FROM (
    SELECT DISTINCT
            BALANCE.ACC_0 AS AccountNO,
        BALANCE.CUR_0 AS Currency,
        FISCALYEAR.DESSHO_0 AS Year,
        IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
          SUM(DEBLED_0) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0),
          SUM(DEB_0) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0,BALANCE.CUR_0)) AS D0,
        IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
          SUM(CDTLED_0) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0),
          SUM(CDT_0) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0,BALANCE.CUR_0)) AS C0,
        IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
          SUM(DEBLED_1) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0),
          SUM(DEB_1) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0,BALANCE.CUR_0)) AS D1,
        IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
          SUM(CDTLED_1) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0),
          SUM(CDT_1) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0,BALANCE.CUR_0)) AS C1,
        IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
          SUM(DEBLED_2) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0),
          SUM(DEB_2) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0,BALANCE.CUR_0)) AS D2,
        IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
          SUM(CDTLED_2) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0),
          SUM(CDT_2) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0,BALANCE.CUR_0)) AS C2,
        IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
          SUM(DEBLED_3) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0),
          SUM(DEB_3) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0,BALANCE.CUR_0)) AS D3,
        IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
          SUM(CDTLED_3) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0),
          SUM(CDT_3) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0,BALANCE.CUR_0)) AS C3,
        IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
          SUM(DEBLED_4) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0),
          SUM(DEB_4) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0,BALANCE.CUR_0)) AS D4,
        IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
          SUM(CDTLED_4) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0),
          SUM(CDT_4) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0,BALANCE.CUR_0)) AS C4,
        IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
          SUM(DEBLED_5) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0),
          SUM(DEB_5) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0,BALANCE.CUR_0)) AS D5,
        IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
          SUM(CDTLED_5) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0),
          SUM(CDT_5) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0,BALANCE.CUR_0)) AS C5,
        IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
          SUM(DEBLED_6) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0),
          SUM(DEB_6) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0,BALANCE.CUR_0)) AS D6,
        IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
          SUM(CDTLED_6) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0),
          SUM(CDT_6) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0,BALANCE.CUR_0)) AS C6,
        IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
          SUM(DEBLED_7) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0),
          SUM(DEB_7) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0,BALANCE.CUR_0)) AS D7,
        IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
          SUM(CDTLED_7) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0),
          SUM(CDT_7) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0,BALANCE.CUR_0)) AS C7,
        IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
          SUM(DEBLED_8) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0),
          SUM(DEB_8) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0,BALANCE.CUR_0)) AS D8,
        IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
          SUM(CDTLED_8) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0),
          SUM(CDT_8) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0,BALANCE.CUR_0)) AS C8,
        IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
          SUM(DEBLED_9) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0),
          SUM(DEB_9) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0,BALANCE.CUR_0)) AS D9,
        IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
          SUM(CDTLED_9) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0),
          SUM(CDT_9) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0,BALANCE.CUR_0)) AS C9,
        IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
          SUM(DEBLED_10) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0),
          SUM(DEB_10) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0,BALANCE.CUR_0)) AS D10,
        IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
          SUM(CDTLED_10) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0),
          SUM(CDT_10) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0,BALANCE.CUR_0)) AS C10,
        IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
          SUM(DEBLED_11) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0),
          SUM(DEB_11) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0,BALANCE.CUR_0)) AS D11,
        IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
          SUM(CDTLED_11) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0),
          SUM(CDT_11) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0,BALANCE.CUR_0)) AS C11,
        IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
          SUM(DEBLED_12) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0),
          SUM(DEB_12) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0,BALANCE.CUR_0)) AS D12,
        IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
          SUM(CDTLED_12) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0),
          SUM(CDT_12) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0,BALANCE.CUR_0)) AS C12
    FROM BALANCE
    INNER JOIN FISCALYEAR 
        ON FISCALYEAR.FIYNUM_0 = BALANCE.FIY_0 
          AND BALANCE.CPY_0 = FISCALYEAR.CPY_0 
          AND BALANCE.LEDTYP_0 = FISCALYEAR.LEDTYP_0 
    WHERE BALANCE.FCY_0=#{Site} 
        AND BALANCE.BPR_0=''
    <if test = "AccountNOs.length ==1 ">
        AND BALANCE.ACC_0 = 
      <foreach item="item" index="index" collection="AccountNOs" open="" separator="" close="">
          #{item}
      </foreach>
    </if>
    <if test = "AccountNOs.length >1 ">
        AND BALANCE.ACC_0 IN 
      <foreach item="item" index="index" collection="AccountNOs" open="(" separator="," close=")">
          #{item}
      </foreach>
    </if>
    <if test = " Year != '' ">
        AND FISCALYEAR.DESSHO_0 = #{Year}
    </if>
    ) AS T1
  </select>
  <select id="findAccountBalanceForAll" resultType="com.da.sageassistantserver.model.FinancialBalance">
    SELECT 
      T1.AccountNO,
      T1.Currency, 
      T1.Year,
      D0-C0 AS B0,
      IIF(DATEPART(yyyy, GETDATE())=#{Year} AND DATEPART(m, GETDATE())>=1, D0+D1-C0-C1, 0) AS B1,
      IIF(DATEPART(yyyy, GETDATE())=#{Year} AND DATEPART(m, GETDATE())>=2, D0+D1+D2-C0-C1-C2, 0) AS B2,
      IIF(DATEPART(yyyy, GETDATE())=#{Year} AND DATEPART(m, GETDATE())>=3, D0+D1+D2+D3-C0-C1-C2-C3, 0) AS B3,
      IIF(DATEPART(yyyy, GETDATE())=#{Year} AND DATEPART(m, GETDATE())>=4, D0+D1+D2+D3+D4-C0-C1-C2-C3-C4, 0) AS B4,
      IIF(DATEPART(yyyy, GETDATE())=#{Year} AND DATEPART(m, GETDATE())>=5, D0+D1+D2+D3+D4+D5-C0-C1-C2-C3-C4-C5, 0) AS B5,
      IIF(DATEPART(yyyy, GETDATE())=#{Year} AND DATEPART(m, GETDATE())>=6, D0+D1+D2+D3+D4+D5+D6-C0-C1-C2-C3-C4-C5-C6, 0) AS B6,
      IIF(DATEPART(yyyy, GETDATE())=#{Year} AND DATEPART(m, GETDATE())>=7, D0+D1+D2+D3+D4+D5+D6+D7-C0-C1-C2-C3-C4-C5-C6-C7, 0) AS B7,
      IIF(DATEPART(yyyy, GETDATE())=#{Year} AND DATEPART(m, GETDATE())>=8, D0+D1+D2+D3+D4+D5+D6+D7+D8-C0-C1-C2-C3-C4-C5-C6-C7-C8, 0) AS B8,
      IIF(DATEPART(yyyy, GETDATE())=#{Year} AND DATEPART(m, GETDATE())>=9, D0+D1+D2+D3+D4+D5+D6+D7+D8+D9-C0-C1-C2-C3-C4-C5-C6-C7-C8-C9, 0) AS B9,
      IIF(DATEPART(yyyy, GETDATE())=#{Year} AND DATEPART(m, GETDATE())>=10, D0+D1+D2+D3+D4+D5+D6+D7+D8+D9+D10-C0-C1-C2-C3-C4-C5-C6-C7-C8-C9-C10, 0) AS B10,
      IIF(DATEPART(yyyy, GETDATE())=#{Year} AND DATEPART(m, GETDATE())>=11, D0+D1+D2+D3+D4+D5+D6+D7+D8+D9+D10+D11-C0-C1-C2-C3-C4-C5-C6-C7-C8-C9-C10-C11, 0) AS B11,
      IIF(DATEPART(yyyy, GETDATE())=#{Year} AND DATEPART(m, GETDATE())>=12, D0+D1+D2+D3+D4+D5+D6+D7+D8+D9+D10+D11+D12-C0-C1-C2-C3-C4-C5-C6-C7-C8-C9-C10-C11-C12, 0) AS B12,
      D0-C0 AS M0,
      D1-C1 AS M1,
      D2-C2 AS M2,
      D3-C3 AS M3,
      D4-C4 AS M4,
      D5-C5 AS M5,
      D6-C6 AS M6,
      D7-C7 AS M7,
      D8-C8 AS M8,
      D9-C9 AS M9,
      D10-C10 AS M10,
      D11-C11 AS M11,
      D12-C12 AS M12,
      T1.C0,
      T1.C1,
      T1.C2,
      T1.C3,
      T1.C4,
      T1.C5,
      T1.C6,
      T1.C7,
      T1.C8,
      T1.C9,
      T1.C10,
      T1.C11,
      T1.C12,
      T1.D0,
      T1.D1,
      T1.D2,
      T1.D3,
      T1.D4,
      T1.D5,
      T1.D6,
      T1.D7,
      T1.D8,
      T1.D9,
      T1.D10,
      T1.D11,
      T1.D12
    FROM (
    SELECT DISTINCT
        BALANCE.ACC_0 AS AccountNO,
        BALANCE.CUR_0 AS Currency,
        FISCALYEAR.DESSHO_0 AS Year,
        IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
          SUM(DEBLED_0) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0),
          SUM(DEB_0) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0,BALANCE.CUR_0)) AS D0,
        IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
          SUM(CDTLED_0) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0),
          SUM(CDT_0) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0,BALANCE.CUR_0)) AS C0,
        IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
          SUM(DEBLED_1) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0),
          SUM(DEB_1) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0,BALANCE.CUR_0)) AS D1,
        IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
          SUM(CDTLED_1) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0),
          SUM(CDT_1) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0,BALANCE.CUR_0)) AS C1,
        IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
          SUM(DEBLED_2) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0),
          SUM(DEB_2) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0,BALANCE.CUR_0)) AS D2,
        IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
          SUM(CDTLED_2) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0),
          SUM(CDT_2) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0,BALANCE.CUR_0)) AS C2,
        IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
          SUM(DEBLED_3) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0),
          SUM(DEB_3) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0,BALANCE.CUR_0)) AS D3,
        IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
          SUM(CDTLED_3) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0),
          SUM(CDT_3) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0,BALANCE.CUR_0)) AS C3,
        IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
          SUM(DEBLED_4) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0),
          SUM(DEB_4) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0,BALANCE.CUR_0)) AS D4,
        IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
          SUM(CDTLED_4) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0),
          SUM(CDT_4) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0,BALANCE.CUR_0)) AS C4,
        IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
          SUM(DEBLED_5) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0),
          SUM(DEB_5) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0,BALANCE.CUR_0)) AS D5,
        IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
          SUM(CDTLED_5) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0),
          SUM(CDT_5) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0,BALANCE.CUR_0)) AS C5,
        IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
          SUM(DEBLED_6) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0),
          SUM(DEB_6) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0,BALANCE.CUR_0)) AS D6,
        IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
          SUM(CDTLED_6) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0),
          SUM(CDT_6) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0,BALANCE.CUR_0)) AS C6,
        IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
          SUM(DEBLED_7) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0),
          SUM(DEB_7) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0,BALANCE.CUR_0)) AS D7,
        IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
          SUM(CDTLED_7) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0),
          SUM(CDT_7) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0,BALANCE.CUR_0)) AS C7,
        IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
          SUM(DEBLED_8) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0),
          SUM(DEB_8) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0,BALANCE.CUR_0)) AS D8,
        IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
          SUM(CDTLED_8) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0),
          SUM(CDT_8) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0,BALANCE.CUR_0)) AS C8,
        IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
          SUM(DEBLED_9) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0),
          SUM(DEB_9) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0,BALANCE.CUR_0)) AS D9,
        IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
          SUM(CDTLED_9) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0),
          SUM(CDT_9) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0,BALANCE.CUR_0)) AS C9,
        IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
          SUM(DEBLED_10) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0),
          SUM(DEB_10) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0,BALANCE.CUR_0)) AS D10,
        IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
          SUM(CDTLED_10) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0),
          SUM(CDT_10) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0,BALANCE.CUR_0)) AS C10,
        IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
          SUM(DEBLED_11) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0),
          SUM(DEB_11) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0,BALANCE.CUR_0)) AS D11,
        IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
          SUM(CDTLED_11) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0),
          SUM(CDT_11) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0,BALANCE.CUR_0)) AS C11,
        IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
          SUM(DEBLED_12) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0),
          SUM(DEB_12) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0,BALANCE.CUR_0)) AS D12,
        IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
          SUM(CDTLED_12) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0),
          SUM(CDT_12) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.ACC_0,BALANCE.CUR_0)) AS C12
    FROM BALANCE
    INNER JOIN FISCALYEAR 
        ON FISCALYEAR.FIYNUM_0 = BALANCE.FIY_0 
          AND BALANCE.CPY_0 = FISCALYEAR.CPY_0 
          AND BALANCE.LEDTYP_0 = FISCALYEAR.LEDTYP_0 
    WHERE BALANCE.FCY_0=#{Site} 
        AND BALANCE.BPR_0=''
    <if test = " Year != '' ">
        AND FISCALYEAR.DESSHO_0 = #{Year}
    </if>
    ) AS T1
  </select>

  <select id="findInvoiceSumAmount" resultType="com.da.sageassistantserver.model.FinancialInvoiceSumAmount">
  WITH 
  --- Main due list
  T0 AS (
    SELECT DISTINCT
      GACCDUDATE.ROWID AS Id,
      GACCDUDATE.FCY_0 AS Site,
      GACCDUDATE.BPR_0 AS CustomerCode,
      BPCUSTOMER.BPCNAM_0 AS CustomerName,
      GACCDUDATE.NUM_0 AS InvoiceNO,
      GACCDUDATE.CUR_0 AS Currency,
      SUM(GACCDUDATE.AMTCUR_0) OVER (PARTITION BY GACCDUDATE.ACCNUM_0) AS Amount,
      SUM(GACCDUDATE.AMTLOC_0) OVER (PARTITION BY GACCDUDATE.ACCNUM_0) AS AmountLocal,
      SUM(GACCDUDATE.PAYCUR_0) OVER (PARTITION BY GACCDUDATE.ACCNUM_0) AS Pay,
      SUM(GACCDUDATE.PAYLOC_0) OVER (PARTITION BY GACCDUDATE.ACCNUM_0) AS PayLocal,
	    COMPANY.ACCCUR_0 AS LocalCurrency,
      MIN(GACCDUDATE.CREDAT_0) OVER (PARTITION BY GACCDUDATE.ACCNUM_0) AS CreateDate,
      MAX(GACCDUDATE.DUDDAT_0) OVER (PARTITION BY GACCDUDATE.ACCNUM_0) AS DueDate,
      IIF(GACCDUDATE.PAYDAT_0 = '1753-01-01', NULL, GACCDUDATE.PAYDAT_0) AS PayDate,
      IIF(AMTCUR_0=PAYCUR_0, 'Paid', IIF(AMTCUR_0 > PAYCUR_0 AND PAYCUR_0 != 0, 'P-Paid', 'U-Paid')) AS Status
    FROM EXPLOIT.GACCDUDATE GACCDUDATE
      LEFT JOIN EXPLOIT.BPCUSTOMER BPCUSTOMER
        ON BPCUSTOMER.BPCNUM_0 = GACCDUDATE.BPR_0
       INNER JOIN EXPLOIT.COMPANY COMPANY
        ON COMPANY.MAIFCY_0 = GACCDUDATE.FCY_0 
    WHERE 1=1
    AND GACCDUDATE.TYP_0 = 'FFC'
    AND CASE WHEN GACCDUDATE.PAMTYP_0 = 2 THEN 0 ELSE 1 END = 1  -- EXCLUDE duplicate
    <choose>
    <when test=' Site == "ALL" '>
    AND
    CASE 
      WHEN GACCDUDATE.FCY_0 IN ('ZHU','HKG','YSH') THEN 'CHINA' ELSE 'OTHER-SITE'
    END !=
    CASE 
      WHEN GACCDUDATE.BPR_0 IN ('00870', '00871', '03167') THEN 'CHINA' ELSE 'OTHER-CUSTOMER'
    END
    </when>
    <when test=' Site == "CHINA" '>
    AND GACCDUDATE.FCY_0 IN ('ZHU','HKG','YSH')
    AND GACCDUDATE.BPR_0 NOT IN ('00870', '00871', '03167')
    </when>
    <otherwise>
    AND GACCDUDATE.FCY_0 = #{Site} 
    </otherwise>
    </choose>

    <choose>
    <when test=' CustomerCode == "ALL" '>
    </when>
    <otherwise>
    AND GACCDUDATE.BPR_0 = #{CustomerCode}
    </otherwise>
    </choose>
    
    <choose>
    <when test=' DateType == "NEW" '>
    AND (GACCDUDATE.CREDAT_0 BETWEEN CONVERT(datetime, #{DateFrom}, 120) AND CONVERT(datetime, #{DateTo}, 120))
    </when>
    <when test=' DateType == "DUE" '>
    AND (GACCDUDATE.DUDDAT_0 BETWEEN CONVERT(datetime, #{DateFrom}, 120) AND CONVERT(datetime, #{DateTo}, 120))
    </when>
    <when test=' DateType == "PAY" '>
    AND (GACCDUDATE.PAYDAT_0 BETWEEN CONVERT(datetime, #{DateFrom}, 120) AND CONVERT(datetime, #{DateTo}, 120))
    </when>
    <otherwise>
    AND (GACCDUDATE.CREDAT_0 BETWEEN CONVERT(datetime, #{DateFrom}, 120) AND CONVERT(datetime, #{DateTo}, 120)) 
    </otherwise>
    </choose>

  ),
  T1 AS (
      SELECT
        CURDEN_0 AS Sour,
        CUR_0 AS Dest,
        CHGRAT_0 AS Rate,
        CHGSTRDAT_0 AS StartDate,
        LEAD(CHGSTRDAT_0,1,GETDATE()) OVER (PARTITION BY CUR_0,CURDEN_0 ORDER BY CHGSTRDAT_0 ASC) AS EndDate
      FROM EXPLOIT.TABCHANGE
  ),
  T2 AS (
    SELECT 
      T0.Site,
      T0.CustomerCode,
      T0.InvoiceNO,
      T0.CreateDate,
      T0.DueDate,
      T0.PayDate,
      IIF(T0.Currency = 'USD', T0.Amount, T0.Amount/T1.Rate) AS USD,
      IIF(T0.Currency = 'USD', T0.Pay, T0.Pay/T1.Rate) AS USDPay,
      T0.AmountLocal,
      T0.PayLocal,
      T0.LocalCurrency
    FROM T0
    LEFT JOIN T1
        ON  T1.Dest = 'USD'
           AND T1.Sour = T0.Currency
           AND T0.CreateDate >= T1.StartDate 
           AND T1.EndDate > T0.CreateDate
    WHERE 1=1
    <choose>
    <when test=' PayStatus == "ALL" '>
    </when>
    <when test=' PayStatus == "PU-Paid" '>
    AND T0.Status IN ('P-Paid', 'U-Paid')
    </when>
    <otherwise>
    AND T0.Status = #{PayStatus}
    </otherwise>
    </choose>
 )

   SELECT DISTINCT
    T2.Site,
    <if test=' CustomerCode != "ALL" '>
    T2.CustomerCode,
    </if>

    <choose>
    <when test=' DateType == "NEW" '>
        <choose>
          <when test=' Interval == "Month" and CustomerCode != "ALL" '>
          FORMAT(Year(T2.CreateDate), '0000') + '-' + FORMAT(MONTH(T2.CreateDate), '00') AS Target,
          ROUND(SUM(T2.USD)         OVER(PARTITION BY T2.Site, T2.CustomerCode, FORMAT(Year(T2.CreateDate), '0000') + '-' + FORMAT(MONTH(T2.CreateDate), '00')), 0) AS SumUSDTarget,
          ROUND(SUM(T2.USDPay)      OVER(PARTITION BY T2.Site, T2.CustomerCode, FORMAT(Year(T2.CreateDate), '0000') + '-' + FORMAT(MONTH(T2.CreateDate), '00')), 0) AS SumUSDPayTarget,
          ROUND(SUM(T2.AmountLocal) OVER(PARTITION BY T2.Site, T2.CustomerCode, FORMAT(Year(T2.CreateDate), '0000') + '-' + FORMAT(MONTH(T2.CreateDate), '00')), 0) AS SumLocalTarget,
          ROUND(SUM(T2.PayLocal)    OVER(PARTITION BY T2.Site, T2.CustomerCode, FORMAT(Year(T2.CreateDate), '0000') + '-' + FORMAT(MONTH(T2.CreateDate), '00')), 0) AS SumLocalPayTarget,
          </when>
          <when test=' Interval == "Month" and CustomerCode == "ALL" '>
          FORMAT(Year(T2.CreateDate), '0000') + '-' + FORMAT(MONTH(T2.CreateDate), '00') AS Target,
          ROUND(SUM(T2.USD)         OVER(PARTITION BY T2.Site, FORMAT(Year(T2.CreateDate), '0000') + '-' + FORMAT(MONTH(T2.CreateDate), '00')), 0) AS SumUSDTarget,
          ROUND(SUM(T2.USDPay)      OVER(PARTITION BY T2.Site, FORMAT(Year(T2.CreateDate), '0000') + '-' + FORMAT(MONTH(T2.CreateDate), '00')), 0) AS SumUSDPayTarget,
          ROUND(SUM(T2.AmountLocal) OVER(PARTITION BY T2.Site, FORMAT(Year(T2.CreateDate), '0000') + '-' + FORMAT(MONTH(T2.CreateDate), '00')), 0) AS SumLocalTarget,
          ROUND(SUM(T2.PayLocal)    OVER(PARTITION BY T2.Site, FORMAT(Year(T2.CreateDate), '0000') + '-' + FORMAT(MONTH(T2.CreateDate), '00')), 0) AS SumLocalPayTarget,
          </when>
          <when test=' Interval == "Year" and CustomerCode != "ALL" '>
          FORMAT(Year(T2.CreateDate), '0000') AS Target,
          ROUND(SUM(T2.USD)         OVER(PARTITION BY T2.Site, T2.CustomerCode, FORMAT(Year(T2.CreateDate), '0000')), 0) AS SumUSDTarget,
          ROUND(SUM(T2.USDPay)      OVER(PARTITION BY T2.Site, T2.CustomerCode, FORMAT(Year(T2.CreateDate), '0000')), 0) AS SumUSDPayTarget,
          ROUND(SUM(T2.AmountLocal) OVER(PARTITION BY T2.Site, T2.CustomerCode, FORMAT(Year(T2.CreateDate), '0000')), 0) AS SumLocalTarget,
          ROUND(SUM(T2.PayLocal)    OVER(PARTITION BY T2.Site, T2.CustomerCode, FORMAT(Year(T2.CreateDate), '0000')), 0) AS SumLocalPayTarget,
          </when>
          <when test=' Interval == "Year" and CustomerCode == "ALL" '>
          FORMAT(Year(T2.CreateDate), '0000') AS Target,
          ROUND(SUM(T2.USD)         OVER(PARTITION BY T2.Site, FORMAT(Year(T2.CreateDate), '0000')), 0) AS SumUSDTarget,
          ROUND(SUM(T2.USDPay)      OVER(PARTITION BY T2.Site, FORMAT(Year(T2.CreateDate), '0000')), 0) AS SumUSDPayTarget,
          ROUND(SUM(T2.AmountLocal) OVER(PARTITION BY T2.Site, FORMAT(Year(T2.CreateDate), '0000')), 0) AS SumLocalTarget,
          ROUND(SUM(T2.PayLocal)    OVER(PARTITION BY T2.Site, FORMAT(Year(T2.CreateDate), '0000')), 0) AS SumLocalPayTarget,
          </when>
          <otherwise>
          </otherwise>
        </choose>
    </when>
    <when test=' DateType == "DUE" '>
        <choose>
          <when test=' Interval == "Month" and CustomerCode != "ALL" '>
          FORMAT(Year(T2.DueDate), '0000') + '-' + FORMAT(MONTH(T2.DueDate), '00') AS Target,
          ROUND(SUM(T2.USD)         OVER(PARTITION BY T2.Site, T2.CustomerCode, FORMAT(Year(T2.DueDate), '0000') + '-' + FORMAT(MONTH(T2.DueDate), '00')), 0) AS SumUSDTarget,
          ROUND(SUM(T2.USDPay)      OVER(PARTITION BY T2.Site, T2.CustomerCode, FORMAT(Year(T2.DueDate), '0000') + '-' + FORMAT(MONTH(T2.DueDate), '00')), 0) AS SumUSDPayTarget,
          ROUND(SUM(T2.AmountLocal) OVER(PARTITION BY T2.Site, T2.CustomerCode, FORMAT(Year(T2.DueDate), '0000') + '-' + FORMAT(MONTH(T2.DueDate), '00')), 0) AS SumLocalTarget,
          ROUND(SUM(T2.PayLocal)    OVER(PARTITION BY T2.Site, T2.CustomerCode, FORMAT(Year(T2.DueDate), '0000') + '-' + FORMAT(MONTH(T2.DueDate), '00')), 0) AS SumLocalPayTarget,
          </when>
          <when test=' Interval == "Month" and CustomerCode == "ALL" '>
          FORMAT(Year(T2.DueDate), '0000') + '-' + FORMAT(MONTH(T2.DueDate), '00') AS Target,
          ROUND(SUM(T2.USD)         OVER(PARTITION BY T2.Site, FORMAT(Year(T2.DueDate), '0000') + '-' + FORMAT(MONTH(T2.DueDate), '00')), 0) AS SumUSDTarget,
          ROUND(SUM(T2.USDPay)      OVER(PARTITION BY T2.Site, FORMAT(Year(T2.DueDate), '0000') + '-' + FORMAT(MONTH(T2.DueDate), '00')), 0) AS SumUSDPayTarget,
          ROUND(SUM(T2.AmountLocal) OVER(PARTITION BY T2.Site, FORMAT(Year(T2.DueDate), '0000') + '-' + FORMAT(MONTH(T2.DueDate), '00')), 0) AS SumLocalTarget,
          ROUND(SUM(T2.PayLocal)    OVER(PARTITION BY T2.Site, FORMAT(Year(T2.DueDate), '0000') + '-' + FORMAT(MONTH(T2.DueDate), '00')), 0) AS SumLocalPayTarget,
          </when>
          <when test=' Interval == "Year" and CustomerCode != "ALL" '>
          FORMAT(Year(T2.DueDate), '0000') AS Target,
          ROUND(SUM(T2.USD)         OVER(PARTITION BY T2.Site, T2.CustomerCode, FORMAT(Year(T2.DueDate), '0000')), 0) AS SumUSDTarget,
          ROUND(SUM(T2.USDPay)      OVER(PARTITION BY T2.Site, T2.CustomerCode, FORMAT(Year(T2.DueDate), '0000')), 0) AS SumUSDPayTarget,
          ROUND(SUM(T2.AmountLocal) OVER(PARTITION BY T2.Site, T2.CustomerCode, FORMAT(Year(T2.DueDate), '0000')), 0) AS SumLocalTarget,
          ROUND(SUM(T2.PayLocal)    OVER(PARTITION BY T2.Site, T2.CustomerCode, FORMAT(Year(T2.DueDate), '0000')), 0) AS SumLocalPayTarget,
          </when>
          <when test=' Interval == "Year" and CustomerCode == "ALL" '>
          FORMAT(Year(T2.DueDate), '0000') AS Target,
          ROUND(SUM(T2.USD)         OVER(PARTITION BY T2.Site, FORMAT(Year(T2.DueDate), '0000')), 0) AS SumUSDTarget,
          ROUND(SUM(T2.USDPay)      OVER(PARTITION BY T2.Site, FORMAT(Year(T2.DueDate), '0000')), 0) AS SumUSDPayTarget,
          ROUND(SUM(T2.AmountLocal) OVER(PARTITION BY T2.Site, FORMAT(Year(T2.DueDate), '0000')), 0) AS SumLocalTarget,
          ROUND(SUM(T2.PayLocal)    OVER(PARTITION BY T2.Site, FORMAT(Year(T2.DueDate), '0000')), 0) AS SumLocalPayTarget,
          </when>
          <otherwise>
          </otherwise>
        </choose>
    </when>
    <when test=' DateType == "PAY" '>
        <choose>
          <when test=' Interval == "Month" and CustomerCode != "ALL" '>
          FORMAT(Year(T2.PayDate), '0000') + '-' + FORMAT(MONTH(T2.PayDate), '00') AS Target,
          ROUND(SUM(T2.USD)         OVER(PARTITION BY T2.Site, T2.CustomerCode, FORMAT(Year(T2.PayDate), '0000') + '-' + FORMAT(MONTH(T2.PayDate), '00')), 0) AS SumUSDTarget,
          ROUND(SUM(T2.USDPay)      OVER(PARTITION BY T2.Site, T2.CustomerCode, FORMAT(Year(T2.PayDate), '0000') + '-' + FORMAT(MONTH(T2.PayDate), '00')), 0) AS SumUSDPayTarget,
          ROUND(SUM(T2.AmountLocal) OVER(PARTITION BY T2.Site, T2.CustomerCode, FORMAT(Year(T2.PayDate), '0000') + '-' + FORMAT(MONTH(T2.PayDate), '00')), 0) AS SumLocalTarget,
          ROUND(SUM(T2.PayLocal)    OVER(PARTITION BY T2.Site, T2.CustomerCode, FORMAT(Year(T2.PayDate), '0000') + '-' + FORMAT(MONTH(T2.PayDate), '00')), 0) AS SumLocalPayTarget,
          </when>
          <when test=' Interval == "Month" and CustomerCode == "ALL" '>
          FORMAT(Year(T2.PayDate), '0000') + '-' + FORMAT(MONTH(T2.PayDate), '00') AS Target,
          ROUND(SUM(T2.USD)         OVER(PARTITION BY T2.Site, FORMAT(Year(T2.PayDate), '0000') + '-' + FORMAT(MONTH(T2.PayDate), '00')), 0) AS SumUSDTarget,
          ROUND(SUM(T2.USDPay)      OVER(PARTITION BY T2.Site, FORMAT(Year(T2.PayDate), '0000') + '-' + FORMAT(MONTH(T2.PayDate), '00')), 0) AS SumUSDPayTarget,
          ROUND(SUM(T2.AmountLocal) OVER(PARTITION BY T2.Site, FORMAT(Year(T2.PayDate), '0000') + '-' + FORMAT(MONTH(T2.PayDate), '00')), 0) AS SumLocalTarget,
          ROUND(SUM(T2.PayLocal)    OVER(PARTITION BY T2.Site, FORMAT(Year(T2.PayDate), '0000') + '-' + FORMAT(MONTH(T2.PayDate), '00')), 0) AS SumLocalPayTarget,
          </when>
          <when test=' Interval == "Year" and CustomerCode != "ALL" '>
          FORMAT(Year(T2.PayDate), '0000') AS Target,
          ROUND(SUM(T2.USD)         OVER(PARTITION BY T2.Site, T2.CustomerCode, FORMAT(Year(T2.PayDate), '0000')), 0) AS SumUSDTarget,
          ROUND(SUM(T2.USDPay)      OVER(PARTITION BY T2.Site, T2.CustomerCode, FORMAT(Year(T2.PayDate), '0000')), 0) AS SumUSDPayTarget,
          ROUND(SUM(T2.AmountLocal) OVER(PARTITION BY T2.Site, T2.CustomerCode, FORMAT(Year(T2.PayDate), '0000')), 0) AS SumLocalTarget,
          ROUND(SUM(T2.PayLocal)    OVER(PARTITION BY T2.Site, T2.CustomerCode, FORMAT(Year(T2.PayDate), '0000')), 0) AS SumLocalPayTarget,
          </when>
          <when test=' Interval == "Year" and CustomerCode == "ALL" '>
          FORMAT(Year(T2.PayDate), '0000') AS Target,
          ROUND(SUM(T2.USD)         OVER(PARTITION BY T2.Site, FORMAT(Year(T2.PayDate), '0000')), 0) AS SumUSDTarget,
          ROUND(SUM(T2.USDPay)      OVER(PARTITION BY T2.Site, FORMAT(Year(T2.PayDate), '0000')), 0) AS SumUSDPayTarget,
          ROUND(SUM(T2.AmountLocal) OVER(PARTITION BY T2.Site, FORMAT(Year(T2.PayDate), '0000')), 0) AS SumLocalTarget,
          ROUND(SUM(T2.PayLocal)    OVER(PARTITION BY T2.Site, FORMAT(Year(T2.PayDate), '0000')), 0) AS SumLocalPayTarget,
          </when>
          <otherwise>
          </otherwise>
        </choose>
    </when>
    <otherwise>
    </otherwise>
    </choose>

    T2.LocalCurrency
  FROM T2
  ORDER BY 
     Target ASC
  </select>
  <select id="findInvoicePayOTP" resultType="com.da.sageassistantserver.model.FinancialInvoicePayOTP">
  WITH 
  --- Main due list
  T0 AS (
    SELECT DISTINCT
      GACCDUDATE.ROWID AS Id,
      GACCDUDATE.FCY_0 AS Site,
      GACCDUDATE.BPR_0 AS CustomerCode,
      BPCUSTOMER.BPCNAM_0 AS CustomerName,
      GACCDUDATE.NUM_0 AS InvoiceNO,
      GACCDUDATE.CUR_0 AS Currency,
      SUM(GACCDUDATE.AMTCUR_0) OVER (PARTITION BY GACCDUDATE.ACCNUM_0) AS Amount,
      SUM(GACCDUDATE.AMTLOC_0) OVER (PARTITION BY GACCDUDATE.ACCNUM_0) AS AmountLocal,
      SUM(GACCDUDATE.PAYCUR_0) OVER (PARTITION BY GACCDUDATE.ACCNUM_0) AS Pay,
      SUM(GACCDUDATE.PAYLOC_0) OVER (PARTITION BY GACCDUDATE.ACCNUM_0) AS PayLocal,
	    COMPANY.ACCCUR_0 AS LocalCurrency,
      MIN(GACCDUDATE.CREDAT_0) OVER (PARTITION BY GACCDUDATE.ACCNUM_0) AS CreateDate,
      MAX(GACCDUDATE.DUDDAT_0) OVER (PARTITION BY GACCDUDATE.ACCNUM_0) AS DueDate,
      IIF(GACCDUDATE.PAYDAT_0 = '1753-01-01', NULL, GACCDUDATE.PAYDAT_0) AS PayDate,
      IIF(AMTCUR_0=PAYCUR_0, 'Paid', IIF(AMTCUR_0 > PAYCUR_0 AND PAYCUR_0 != 0, 'P-Paid', 'U-Paid')) AS Status
    FROM EXPLOIT.GACCDUDATE GACCDUDATE
      LEFT JOIN EXPLOIT.BPCUSTOMER BPCUSTOMER
        ON BPCUSTOMER.BPCNUM_0 = GACCDUDATE.BPR_0
       INNER JOIN EXPLOIT.COMPANY COMPANY
        ON COMPANY.MAIFCY_0 = GACCDUDATE.FCY_0 
    WHERE 1=1
    AND GACCDUDATE.TYP_0 = 'FFC'
    AND CASE WHEN GACCDUDATE.PAMTYP_0 = 2 THEN 0 ELSE 1 END = 1  -- EXCLUDE duplicate
    <choose>
    <when test=' Site == "ALL" '>
    AND
    CASE 
      WHEN GACCDUDATE.FCY_0 IN ('ZHU','HKG','YSH') THEN 'CHINA' ELSE 'OTHER-SITE'
    END !=
    CASE 
      WHEN GACCDUDATE.BPR_0 IN ('00870', '00871', '03167') THEN 'CHINA' ELSE 'OTHER-CUSTOMER'
    END
    </when>
    <when test=' Site == "CHINA" '>
    AND GACCDUDATE.FCY_0 IN ('ZHU','HKG','YSH')
    AND GACCDUDATE.BPR_0 NOT IN ('00870', '00871', '03167')
    </when>
    <otherwise>
    AND GACCDUDATE.FCY_0 = #{Site} 
    </otherwise>
    </choose>

    <choose>
    <when test=' CustomerCode == "ALL" '>
    </when>
    <otherwise>
    AND GACCDUDATE.BPR_0 = #{CustomerCode}
    </otherwise>
    </choose>
    
    <choose>
    <when test=' DateType == "NEW" '>
    AND (GACCDUDATE.CREDAT_0 BETWEEN CONVERT(datetime, #{DateFrom}, 120) AND CONVERT(datetime, #{DateTo}, 120))
    </when>
    <when test=' DateType == "DUE" '>
    AND (GACCDUDATE.DUDDAT_0 BETWEEN CONVERT(datetime, #{DateFrom}, 120) AND CONVERT(datetime, #{DateTo}, 120))
    </when>
    <when test=' DateType == "PAY" '>
    AND (GACCDUDATE.PAYDAT_0 BETWEEN CONVERT(datetime, #{DateFrom}, 120) AND CONVERT(datetime, #{DateTo}, 120))
    </when>
    <otherwise>
    AND (GACCDUDATE.CREDAT_0 BETWEEN CONVERT(datetime, #{DateFrom}, 120) AND CONVERT(datetime, #{DateTo}, 120)) 
    </otherwise>
    </choose>

  ),
  T1 AS (
    SELECT 
    T0.*,
    IIF(T0.OrderPlanedDate > GETDATE(), DATEDIFF(day, T0.OrderPlanedDate, GETDATE()),
        IIF(T0.LastDeliveryNO IS NULL, DATEDIFF(day, T0.OrderPlanedDate, GETDATE()),
            IIF(T0.Qty > T0.TotalDeliveryQty, DATEDIFF(day, T0.OrderPlanedDate, GETDATE()),
                DATEDIFF(day, T0.OrderPlanedDate, T0.LastShipDate)
              )
           )
       ) AS DaysDelay
  FROM T0
  ),    
  </select>
  <select id="findInvoicePay" resultType="com.da.sageassistantserver.model.FinancialInvoicePay">
  WITH 
  --- Main due list
  FFC_DUE_RAW AS (
    SELECT DISTINCT
      GACCDUDATE.ROWID AS Id,
      GACCDUDATE.FCY_0 AS Site,
      GACCDUDATE.BPR_0 AS Customer,
      BPCUSTOMER.BPCNAM_0 AS Name,
      GACCDUDATE.NUM_0 AS InvoiceNO,
      GACCDUDATE.CUR_0 AS Currency,
      SUM(GACCDUDATE.AMTCUR_0) OVER (PARTITION BY GACCDUDATE.ACCNUM_0) AS Amount,
      SUM(GACCDUDATE.AMTLOC_0) OVER (PARTITION BY GACCDUDATE.ACCNUM_0) AS AmountLocal,
      SUM(GACCDUDATE.PAYCUR_0) OVER (PARTITION BY GACCDUDATE.ACCNUM_0) AS Pay,
      SUM(GACCDUDATE.PAYLOC_0) OVER (PARTITION BY GACCDUDATE.ACCNUM_0) AS PayLocal,
      MIN(GACCDUDATE.CREDAT_0) OVER (PARTITION BY GACCDUDATE.ACCNUM_0) AS CreateDate,
      MAX(GACCDUDATE.DUDDAT_0) OVER (PARTITION BY GACCDUDATE.ACCNUM_0) AS DueDate,
      IIF(GACCDUDATE.PAYDAT_0 = '1753-01-01', NULL, GACCDUDATE.PAYDAT_0) AS PayDate,
      IIF(AMTCUR_0=PAYCUR_0, 'Paid', IIF(AMTCUR_0 > PAYCUR_0 AND PAYCUR_0 != 0, 'P-Paid', 'U-Paid')) AS Status
    FROM EXPLOIT.GACCDUDATE GACCDUDATE
      LEFT JOIN EXPLOIT.BPCUSTOMER BPCUSTOMER
        ON BPCUSTOMER.BPCNUM_0 = GACCDUDATE.BPR_0
    WHERE 1=1
    AND GACCDUDATE.TYP_0 = 'FFC'
    AND CASE WHEN GACCDUDATE.PAMTYP_0 = 2 THEN 0 ELSE 1 END = 1  -- EXCLUDE duplicate
    <choose>
    <when test=' Site == "ALL" '>
    </when>
    <when test=' Site == "CHINA" '>
    AND GACCDUDATE.FCY_0 IN ('ZHU','HKG','YSH')
    </when>
    <otherwise>
    AND GACCDUDATE.FCY_0 = #{Site} 
    </otherwise>
    </choose>

    <choose>
    <when test=' CustomerCode == "ALL" '>
    </when>
    <otherwise>
    AND GACCDUDATE.BPR_0 = #{CustomerCode}
    </otherwise>
    </choose>
    
    <choose>
    <when test=' DateType == "NEW" '>
    AND (GACCDUDATE.CREDAT_0 BETWEEN CONVERT(datetime, #{DateFrom}, 120) AND CONVERT(datetime, #{DateTo}, 120))
    </when>
    <when test=' DateType == "DUE" '>
    AND (GACCDUDATE.DUDDAT_0 BETWEEN CONVERT(datetime, #{DateFrom}, 120) AND CONVERT(datetime, #{DateTo}, 120))
    </when>
    <when test=' DateType == "PAY" '>
    AND (GACCDUDATE.PAYDAT_0 BETWEEN CONVERT(datetime, #{DateFrom}, 120) AND CONVERT(datetime, #{DateTo}, 120))
    </when>
    <otherwise>
    AND (GACCDUDATE.CREDAT_0 BETWEEN CONVERT(datetime, #{DateFrom}, 120) AND CONVERT(datetime, #{DateTo}, 120)) 
    </otherwise>
    </choose>
  ),
  FFC_DUE AS (
    SELECT DISTINCT
      FFC_DUE_RAW.*,
      SINVOICE.YFAPIAO_0 AS Fapiao,
      IIF(SINVOICE.YSOHNUM_0 != '', SINVOICE.YSOHNUM_0, SORDEROLD.SOHNUM_0) AS OrderNO,
      IIF(SINVOICE.YSOHNUM_0 != '', SORDER.CUSORDREF_0, SINVOICEV.INVREF_0) AS CustRef
    FROM FFC_DUE_RAW
      LEFT JOIN EXPLOIT.SINVOICE SINVOICE
        ON FFC_DUE_RAW.InvoiceNO = SINVOICE.NUM_0
      LEFT JOIN EXPLOIT.SORDER SORDER
        ON SINVOICE.YSOHNUM_0 = SORDER.SOHNUM_0
      ----- SOME NEW INVOICE WITHOUT SORDER AND CUSORDREF IS WRONG, TO FIND THE OLD SORDER FROM MANUAL SET CUSORDREF
      LEFT JOIN EXPLOIT.SINVOICEV SINVOICEV
        ON FFC_DUE_RAW.InvoiceNO = SINVOICEV.NUM_0
      LEFT JOIN EXPLOIT.SORDER SORDEROLD
        ON SORDEROLD.CUSORDREF_0 = SINVOICEV.INVREF_0
          AND SINVOICEV.INVREF_0 != ''
  ),
  -- Matched FFC auto
  UN_PAID AS (
    SELECT DISTINCT
      FFC_DUE.InvoiceNO,
      NULL AS ENTRYNO,
      NULL AS MTCBY,
      NULL AS MTC_0,
      NULL AS PAYDAT_0,
      NULL AS CUR_0,
      NULL AS AMTCUR_0,
      NULL AS DES_0,
      NULL AS REFINTLIN_0
    FROM FFC_DUE
    WHERE 1=1
      AND FFC_DUE.Status = 'U-Paid'
  ),
  -- Matched FFC auto, It's not need
  -- Matched FCCR auto
  FCR_AUTO AS (
    SELECT DISTINCT 
      FFC_DUE.InvoiceNO,
      GACCENTRYD.NUM_0 AS ENTRYNO,
      'FCR_AUTO' AS MTCBY,
      GACCENTRYD.MTC_0 AS MTC_0,
      GACCENTRYD.ACCDAT_0 AS PAYDAT_0,
      GACCENTRYD.CUR_0,
      GACCENTRYD.AMTCUR_0,
      GACCENTRYD.DES_0 + ' ' + GACCENTRYD.YDES_0 AS DES_0,
      GACCENTRYD.REFINTLIN_0
    FROM FFC_DUE
      INNER JOIN EXPLOIT.PAYMENTD PAYMENTD
          ON FFC_DUE.InvoiceNO = PAYMENTD.VCRNUM_0
             AND FFC_DUE.Site = PAYMENTD.FCYLIN_0
             AND FFC_DUE.Status != 'U-Paid'
      INNER JOIN EXPLOIT.GACCENTRYD GACCENTRYD
          ON PAYMENTD.NUM_0 = REPLACE(GACCENTRYD.REFINTLIN_0, 'PYH ', '')
             AND FFC_DUE.Site = GACCENTRYD.FCYLIN_0
    WHERE 1=1
      AND GACCENTRYD.TYP_0 = 'FCR'
      AND GACCENTRYD.SNS_0 = -1
      AND GACCENTRYD.MTC_0 ! = ''
      AND GACCENTRYD.REFINTLIN_0 LIKE 'PYH%' --FCR_AUTO with PYH XXXXX
  ),
  -- Matched FCR FC manual
  FCR_FC  AS (
    SELECT DISTINCT
      FFC_DUE.InvoiceNO,
      GACCENTRYD.NUM_0 AS ENTRYNO,
      'FCR_FC' AS MTCBY,
      GACCENTRYD.MTC_0 AS MTC_0,
      GACCENTRYD.ACCDAT_0 AS PAYDAT_0,
      GACCENTRYD.CUR_0,
      GACCENTRYD.AMTCUR_0,
      GACCENTRYD.DES_0 + ' ' + GACCENTRYD.YDES_0 AS DES_0,
      GACCENTRYD.REFINTLIN_0
    FROM FFC_DUE
      INNER JOIN EXPLOIT.GACCENTRYD GACCENTRYD
          ON FFC_DUE.Site = GACCENTRYD.FCYLIN_0
            AND FFC_DUE.Status != 'U-Paid'
            AND GACCENTRYD.DES_0 LIKE '%' + FFC_DUE.InvoiceNO + '%'
    WHERE 1=1
      AND GACCENTRYD.TYP_0 = 'FCR'
      AND GACCENTRYD.SNS_0 = -1
      AND GACCENTRYD.MTC_0 != ''
      AND GACCENTRYD.REFINTLIN_0 NOT LIKE 'PYH%' 
  ),
  -- Matched FCR CC manual
  FCR_CC  AS (
    SELECT DISTINCT
      FFC_DUE.InvoiceNO,
      GACCENTRYD.NUM_0 AS ENTRYNO,
      'FCR_CC' AS MTCBY,
      GACCENTRYD.MTC_0 AS MTC_0,
      GACCENTRYD.ACCDAT_0 AS PAYDAT_0,
      GACCENTRYD.CUR_0,
      GACCENTRYD.AMTCUR_0,
      GACCENTRYD.DES_0 + ' ' + GACCENTRYD.YDES_0 AS DES_0,
      GACCENTRYD.REFINTLIN_0
    FROM FFC_DUE
      INNER JOIN EXPLOIT.GACCENTRYD GACCENTRYD
          ON FFC_DUE.Site = GACCENTRYD.FCYLIN_0
            AND FFC_DUE.Status != 'U-Paid'
            AND GACCENTRYD.DES_0 LIKE '%' + FFC_DUE.OrderNO + '%'
    WHERE 1=1
      AND GACCENTRYD.TYP_0 = 'FCR'
      AND GACCENTRYD.SNS_0 = -1
      AND GACCENTRYD.MTC_0 != ''
      AND GACCENTRYD.REFINTLIN_0 NOT LIKE 'PYH%' 
  ),
  -- Matched FCR MTC manual
  FCR_MTC  AS (
    SELECT DISTINCT
      FFC_DUE.InvoiceNO,
      GACCENTRYD.NUM_0 AS ENTRYNO,
      'FCR_MTC' AS MTCBY,
      GACCENTRYD.MTC_0 AS MTC_0,
      GACCENTRYD.ACCDAT_0 AS PAYDAT_0,
      GACCENTRYD.CUR_0,
      GACCENTRYD.AMTCUR_0,
      GACCENTRYD.DES_0 + ' ' + GACCENTRYD.YDES_0 AS DES_0,
      GACCENTRYD.REFINTLIN_0
    FROM FFC_DUE
      INNER JOIN EXPLOIT.GACCENTRYD GACCENTRYD_FFC
          ON FFC_DUE.Site = GACCENTRYD_FFC.FCYLIN_0
             AND FFC_DUE.InvoiceNO = GACCENTRYD_FFC.NUM_0
             AND FFC_DUE.Status != 'U-Paid'
             AND GACCENTRYD_FFC.SNS_0 = 1
      INNER JOIN EXPLOIT.GACCENTRYD GACCENTRYD
          ON FFC_DUE.Site = GACCENTRYD.FCYLIN_0
            AND GACCENTRYD.MTC_0 = GACCENTRYD_FFC.MTC_0
            AND GACCENTRYD.BPR_0 = GACCENTRYD_FFC.BPR_0
    WHERE 1=1
      AND GACCENTRYD.TYP_0 = 'FCR'
      AND GACCENTRYD.SNS_0 = -1
      AND GACCENTRYD.MTC_0 != ''
      AND GACCENTRYD.REFINTLIN_0 NOT LIKE 'PYH%' 
  ),
  -- Matched FAC
  FAC_MTC  AS (
    SELECT DISTINCT
      FFC_DUE.InvoiceNO,
      GACCENTRYD.NUM_0 AS ENTRYNO,
      'FAC_MTC' AS MTCBY,
      GACCENTRYD.MTC_0 AS MTC_0,
      GACCENTRYD.ACCDAT_0 AS PAYDAT_0,
      GACCENTRYD.CUR_0,
      GACCENTRYD.AMTCUR_0,
      GACCENTRYD.DES_0 + ' ' + GACCENTRYD.YDES_0 AS DES_0,
      GACCENTRYD.REFINTLIN_0
    FROM FFC_DUE
      INNER JOIN EXPLOIT.GACCENTRYD GACCENTRYD_FFC
          ON FFC_DUE.Site = GACCENTRYD_FFC.FCYLIN_0
             AND FFC_DUE.InvoiceNO = GACCENTRYD_FFC.NUM_0
             AND FFC_DUE.Status != 'U-Paid'
             AND GACCENTRYD_FFC.SNS_0 = 1
      INNER JOIN EXPLOIT.GACCENTRYD GACCENTRYD
          ON FFC_DUE.Site = GACCENTRYD.FCYLIN_0
            AND GACCENTRYD.MTC_0 = GACCENTRYD_FFC.MTC_0
            AND GACCENTRYD.BPR_0 = GACCENTRYD_FFC.BPR_0
    WHERE 1=1
      AND GACCENTRYD.TYP_0 = 'FAC'
      AND GACCENTRYD.SNS_0 = 1
      AND GACCENTRYD.MTC_0 != ''
      AND GACCENTRYD.REFINTLIN_0 NOT LIKE 'PYH%' 
  ),
  -- Matched FOD FC manual
  FOD_FC  AS (
    SELECT DISTINCT
      FFC_DUE.InvoiceNO,
      GACCENTRYD.NUM_0 AS ENTRYNO,
      'FOD_FC' AS MTCBY,
      GACCENTRYD.MTC_0 AS MTC_0,
      GACCENTRYD.ACCDAT_0 AS PAYDAT_0,
      GACCENTRYD.CUR_0,
      GACCENTRYD.AMTCUR_0,
      GACCENTRYD.DES_0 + ' ' + GACCENTRYD.YDES_0 AS DES_0,
      GACCENTRYD.REFINTLIN_0
    FROM FFC_DUE
      INNER JOIN EXPLOIT.GACCENTRYD GACCENTRYD
          ON FFC_DUE.Site = GACCENTRYD.FCYLIN_0
            AND FFC_DUE.Status != 'U-Paid'
            AND GACCENTRYD.DES_0 LIKE '%' + FFC_DUE.InvoiceNO + '%'
    WHERE 1=1
      AND GACCENTRYD.TYP_0 = 'FOD'
      AND GACCENTRYD.SNS_0 = -1
      AND GACCENTRYD.MTC_0 != ''
      AND GACCENTRYD.REFINTLIN_0 NOT LIKE 'PYH%' 
  ),
  -- Matched FOD FC manual
  FOD_CC  AS (
    SELECT DISTINCT
      FFC_DUE.InvoiceNO,
      GACCENTRYD.NUM_0 AS ENTRYNO,
      'FOD_CC' AS MTCBY,
      GACCENTRYD.MTC_0 AS MTC_0,
      GACCENTRYD.ACCDAT_0 AS PAYDAT_0,
      GACCENTRYD.CUR_0,
      GACCENTRYD.AMTCUR_0,
      GACCENTRYD.DES_0 + ' ' + GACCENTRYD.YDES_0 AS DES_0,
      GACCENTRYD.REFINTLIN_0
    FROM FFC_DUE
      INNER JOIN EXPLOIT.GACCENTRYD GACCENTRYD
          ON FFC_DUE.Site = GACCENTRYD.FCYLIN_0
            AND FFC_DUE.Status != 'U-Paid'
            AND GACCENTRYD.DES_0 LIKE '%' + FFC_DUE.OrderNO + '%'
    WHERE 1=1
      AND GACCENTRYD.TYP_0 = 'FOD'
      AND GACCENTRYD.SNS_0 = -1
      AND GACCENTRYD.MTC_0 != ''
      AND GACCENTRYD.REFINTLIN_0 NOT LIKE 'PYH%' 
  ),
  T0 AS (
    SELECT * FROM UN_PAID
      UNION
    SELECT * FROM FCR_AUTO  
      UNION
    SELECT * FROM FCR_FC
      UNION
    SELECT * FROM FCR_CC
      UNION
    SELECT * FROM FCR_MTC
      UNION
    SELECT * FROM FAC_MTC
      UNION     
    SELECT * FROM FOD_FC
      UNION
    SELECT * FROM FOD_CC
 ) 

  SELECT DISTINCT
    FFC_DUE.Id, 
    FFC_DUE.Site,
    FFC_DUE.InvoiceNO,
    FFC_DUE.Fapiao, 
    FFC_DUE.Customer,
    FFC_DUE.CustRef,
    FFC_DUE.Name,
    FFC_DUE.OrderNO,
    FFC_DUE.Status,
    FFC_DUE.Currency,
    FFC_DUE.Amount,
    FFC_DUE.Pay,
    (FFC_DUE.Amount - FFC_DUE.Pay) AS Remaining,
    FFC_DUE.AmountLocal,
    FFC_DUE.PayLocal,
    FFC_DUE.CreateDate,
    FFC_DUE.DueDate,
    T0.PAYDAT_0 AS PayDate,
    T0.MTCBY AS MatchedBy,
    T0.MTC_0 AS MatchedCode,
    T0.ENTRYNO AS PayNO,
    T0.CUR_0 AS PayCurrency,
    T0.AMTCUR_0 AS PayAmount,
    T0.DES_0 AS Desc0,
    T0.REFINTLIN_0 AS Desc1

  FROM 
    FFC_DUE
  LEFT JOIN T0 
    ON FFC_DUE.InvoiceNO = T0.InvoiceNO
  WHERE 1=1
    <choose>
    <when test=' PayStatus == "ALL" '>
    </when>
    <when test=' PayStatus == "PU-Paid" '>
    AND FFC_DUE.Status IN ('P-Paid', 'U-Paid')
    </when>
    <otherwise>
    AND FFC_DUE.Status = #{PayStatus}
    </otherwise>
    </choose>
  ORDER BY
    <choose>
    <when test=' DateType == "NEW" '>
    FFC_DUE.CreateDate ASC
    </when>
    <when test=' DateType == "DUE" '>
    FFC_DUE.DueDate ASC
    </when>
    <when test=' DateType == "PAY" '>
    FFC_DUE.PayDate ASC
    </when>
    <otherwise>
    FFC_DUE.CreateDate ASC
    </otherwise>
    </choose>
    , FFC_DUE.InvoiceNO ASC
  </select>
</mapper>